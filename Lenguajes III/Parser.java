
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 04 12:35:53 BOT 2010
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 04 12:35:53 BOT 2010
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\057\002\000\002\055\006\000\002\002" +
    "\004\000\002\020\003\000\002\020\003\000\002\060\002" +
    "\000\002\056\006\000\002\061\002\000\002\056\006\000" +
    "\002\056\004\000\002\056\004\000\002\056\002\000\002" +
    "\053\004\000\002\023\004\000\002\023\002\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\003" +
    "\000\002\045\003\000\002\045\004\000\002\045\004\000" +
    "\002\045\004\000\002\045\005\000\002\031\005\000\002" +
    "\031\004\000\002\012\003\000\002\012\003\000\002\015" +
    "\006\000\002\016\006\000\002\025\006\000\002\025\005" +
    "\000\002\054\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\017\006\000\002" +
    "\017\005\000\002\014\004\000\002\014\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\035\005\000\002\035\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\034\005\000\002" +
    "\036\003\000\002\036\003\000\002\043\005\000\002\043" +
    "\006\000\002\043\002\000\002\040\006\000\002\040\005" +
    "\000\002\040\005\000\002\037\007\000\002\022\006\000" +
    "\002\022\005\000\002\046\003\000\002\046\003\000\002" +
    "\062\002\000\002\021\006\000\002\002\007\000\002\002" +
    "\012\000\002\003\010\000\002\003\002\000\002\063\002" +
    "\000\002\064\002\000\002\005\016\000\002\065\002\000" +
    "\002\004\010\000\002\004\002\000\002\052\003\000\002" +
    "\052\005\000\002\052\003\000\002\052\003\000\002\052" +
    "\005\000\002\010\003\000\002\010\003\000\002\066\002" +
    "\000\002\006\014\000\002\044\004\000\002\044\003\000" +
    "\002\067\002\000\002\007\010\000\002\042\005\000\002" +
    "\042\005\000\002\042\004\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\003\000\002\042\003\000" +
    "\002\042\005\000\002\042\003\000\002\041\004\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\003\000\002\041\005" +
    "\000\002\041\004\000\002\041\003\000\002\041\003\000" +
    "\002\041\005\000\002\026\003\000\002\026\005\000\002" +
    "\027\005\000\002\027\003\000\002\047\005\000\002\047" +
    "\006\000\002\024\006\000\002\024\004\000\002\030\003" +
    "\000\002\030\002\000\002\070\002\000\002\050\011\000" +
    "\002\071\002\000\002\051\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\026\004\ufff6\005\ufff6\006\ufff6\020\ufff6\057" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6\072\ufff6\001\002" +
    "\000\004\002\373\001\002\000\026\004\012\005\022\006" +
    "\030\020\027\057\031\063\026\064\011\065\025\067\015" +
    "\072\013\001\002\000\004\062\001\001\002\000\010\051" +
    "\uffe6\062\uffe6\067\uffe6\001\002\000\026\004\ufff7\005\ufff7" +
    "\006\ufff7\020\ufff7\057\ufff7\063\ufff7\064\ufff7\065\ufff7\067" +
    "\ufff7\072\ufff7\001\002\000\004\047\364\001\002\000\010" +
    "\051\uffd8\062\uffd8\067\uffd8\001\002\000\010\051\uffd5\062" +
    "\uffd5\067\uffd5\001\002\000\010\051\354\062\uffe0\067\uffe0" +
    "\001\002\000\006\062\uffdd\067\uffdd\001\002\000\006\062" +
    "\uffde\067\uffde\001\002\000\010\051\354\062\uffdf\067\uffdf" +
    "\001\002\000\004\043\ufffc\001\002\000\006\062\ufffe\067" +
    "\344\001\002\000\010\051\uffd7\062\uffd7\067\uffd7\001\002" +
    "\000\010\051\uffe7\062\uffe7\067\uffe7\001\002\000\004\043" +
    "\ufffa\001\002\000\020\004\012\005\022\006\030\063\026" +
    "\064\011\067\015\072\013\001\002\000\004\047\327\001" +
    "\002\000\020\004\012\005\022\006\030\063\026\064\011" +
    "\067\015\072\013\001\002\000\010\051\uffd6\062\uffd6\067" +
    "\uffd6\001\002\000\006\062\ufffd\067\033\001\002\000\026" +
    "\004\ufff8\005\ufff8\006\ufff8\020\ufff8\057\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\067\ufff8\072\ufff8\001\002\000\004\045\034" +
    "\001\002\000\022\004\012\005\022\006\030\046\uff86\063" +
    "\026\064\011\067\015\072\013\001\002\000\006\044\322" +
    "\046\uff87\001\002\000\004\067\321\001\002\000\004\046" +
    "\040\001\002\000\004\047\uff83\001\002\000\004\047\042" +
    "\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\013\uffc1\016\uffc1\017\uffc1\020\uffc1\050\uffc1\061\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\067\uffc1\072\uffc1\001\002\000" +
    "\026\004\uff82\005\uff82\006\uff82\020\uff82\057\uff82\063\uff82" +
    "\064\uff82\065\uff82\067\uff82\072\uff82\001\002\000\042\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\050\ufff3\061\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\067\ufff3\072\ufff3\001\002\000\042\004\012\005\022" +
    "\006\030\007\065\010\055\013\054\016\070\017\050\020" +
    "\027\050\057\061\051\063\026\064\011\065\025\067\052" +
    "\072\013\001\002\000\046\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\050\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\067" +
    "\uffc3\072\uffc3\001\002\000\046\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\050\uffb0\061\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\067\uffb0\072\uffb0\001\002\000\004\045\uffaa\001\002\000" +
    "\024\024\111\041\122\043\311\045\114\054\120\066\112" +
    "\067\134\070\115\071\116\001\002\000\020\021\uffca\025" +
    "\uffca\026\uffca\045\136\051\uffca\053\uffca\067\uffdd\001\002" +
    "\000\046\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\050\ufff4" +
    "\061\ufff4\063\ufff4\064\ufff4\065\ufff4\067\ufff4\072\ufff4\001" +
    "\002\000\004\045\261\001\002\000\004\045\245\001\002" +
    "\000\004\043\244\001\002\000\056\002\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\050\uffc0\057" +
    "\uffc0\061\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\072\uffc0" +
    "\001\002\000\004\043\243\001\002\000\004\067\226\001" +
    "\002\000\046\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\050" +
    "\uffef\061\uffef\063\uffef\064\uffef\065\uffef\067\uffef\072\uffef" +
    "\001\002\000\046\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\050\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\067\uffaf\072" +
    "\uffaf\001\002\000\004\043\236\001\002\000\004\043\235" +
    "\001\002\000\004\043\234\001\002\000\046\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\050\uffc2\061\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\067\uffc2\072\uffc2\001\002\000\004\045\uffae" +
    "\001\002\000\046\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\050\uffee\061\uffee\063\uffee\064\uffee\065\uffee\067\uffee\072" +
    "\uffee\001\002\000\006\043\uffcd\046\uffcd\001\002\000\006" +
    "\043\uffce\046\uffce\001\002\000\004\045\075\001\002\000" +
    "\020\004\012\005\022\006\030\063\026\064\011\067\101" +
    "\072\013\001\002\000\004\067\226\001\002\000\004\043" +
    "\216\001\002\000\004\043\uffab\001\002\000\016\021\uffca" +
    "\025\uffca\026\uffca\051\uffca\053\uffca\067\uffdd\001\002\000" +
    "\014\021\105\025\106\026\104\051\103\053\107\001\002" +
    "\000\022\024\111\041\122\045\114\054\120\066\112\067" +
    "\134\070\115\071\116\001\002\000\044\022\uffc7\023\uffc7" +
    "\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\043\uffc7\044\uffc7" +
    "\046\uffc7\052\uffc7\001\002\000\022\024\111\041\122\045" +
    "\114\054\120\066\112\067\121\070\115\071\116\001\002" +
    "\000\044\022\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\043\uffc8\044\uffc8\046\uffc8\052\uffc8\001\002\000" +
    "\004\067\110\001\002\000\056\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\043\uffcc\044\uffcc\046\uffcc\051\uffcc\052\uffcc\053\uffcc\001" +
    "\002\000\012\024\111\045\114\066\112\067\134\001\002" +
    "\000\046\022\uff95\023\uff95\024\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\043\uff95\044\uff95\046\uff95\052\uff95\053\211\001" +
    "\002\000\022\024\111\041\122\045\114\054\120\066\112" +
    "\067\206\070\115\071\116\001\002\000\022\024\111\041" +
    "\122\045\114\054\120\066\112\067\134\070\115\071\116" +
    "\001\002\000\044\022\uff9e\023\uff9e\024\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\043\uff9e\044\uff9e\046\uff9e\052\uff9e\001" +
    "\002\000\044\022\uff9f\023\uff9f\024\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\043\uff9f\044\uff9f\046\uff9f\052\uff9f\001\002" +
    "\000\044\022\151\023\uffc9\024\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\154\033\155\034\157\035\160\036\152\037\156" +
    "\040\153\043\uffc9\044\uffc9\046\uffc9\052\uffc9\001\002\000" +
    "\004\072\201\001\002\000\054\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\043\uffca\045\136\046\uffca\051\uffca\053\uffca\001\002\000" +
    "\022\024\111\041\122\045\114\054\120\066\112\067\134" +
    "\070\115\071\116\001\002\000\044\022\uff9c\023\130\024" +
    "\131\027\127\030\132\031\126\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\043\uff9c\044\uff9c\046" +
    "\uff9c\052\uff9c\001\002\000\044\022\uff91\023\uff91\024\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\043\uff91\044\uff91\046\uff91" +
    "\052\uff91\001\002\000\044\022\uff92\023\uff92\024\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\043\uff92\044\uff92\046\uff92\052" +
    "\uff92\001\002\000\012\024\111\045\114\066\112\067\134" +
    "\001\002\000\012\024\111\045\114\066\112\067\134\001" +
    "\002\000\012\024\111\045\114\066\112\067\134\001\002" +
    "\000\012\024\111\045\114\066\112\067\134\001\002\000" +
    "\012\024\111\045\114\066\112\067\134\001\002\000\044" +
    "\022\uff99\023\uff99\024\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\043\uff99\044\uff99\046\uff99\052\uff99\001\002\000\060\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\043\uffca\044\uffca\045\136\046\uffca" +
    "\051\uffca\052\uffca\053\uffca\001\002\000\056\021\171\022" +
    "\uff93\023\uff93\024\uff93\025\106\026\104\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\043\uff93\044\uff93\046\uff93\051\103\052\uff93" +
    "\053\107\001\002\000\026\024\111\041\122\045\114\046" +
    "\140\054\120\060\142\066\112\067\134\070\115\071\116" +
    "\001\002\000\006\044\uff8c\046\uff8c\001\002\000\044\022" +
    "\uff8b\023\uff8b\024\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\043" +
    "\uff8b\044\uff8b\046\uff8b\052\uff8b\001\002\000\026\022\151" +
    "\032\154\033\155\034\157\035\160\036\152\037\156\040" +
    "\153\044\uff8f\046\uff8f\001\002\000\004\067\147\001\002" +
    "\000\006\044\144\046\145\001\002\000\024\024\111\041" +
    "\122\045\114\054\120\060\142\066\112\067\134\070\115" +
    "\071\116\001\002\000\044\022\uff8a\023\uff8a\024\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\043\uff8a\044\uff8a\046\uff8a\052" +
    "\uff8a\001\002\000\006\044\uff8d\046\uff8d\001\002\000\012" +
    "\044\uffca\046\uffca\051\uffca\053\uffca\001\002\000\012\044" +
    "\uff8e\046\uff8e\051\103\053\107\001\002\000\022\024\111" +
    "\041\122\045\114\054\120\066\112\067\134\070\115\071" +
    "\116\001\002\000\022\024\111\041\122\045\114\054\120" +
    "\066\112\067\134\070\115\071\116\001\002\000\022\024" +
    "\111\041\122\045\114\054\120\066\112\067\134\070\115" +
    "\071\116\001\002\000\022\024\111\041\122\045\114\054" +
    "\120\066\112\067\134\070\115\071\116\001\002\000\022" +
    "\024\111\041\122\045\114\054\120\066\112\067\134\070" +
    "\115\071\116\001\002\000\022\024\111\041\122\045\114" +
    "\054\120\066\112\067\134\070\115\071\116\001\002\000" +
    "\022\024\111\041\122\045\114\054\120\066\112\067\134" +
    "\070\115\071\116\001\002\000\022\024\111\041\122\045" +
    "\114\054\120\066\112\067\134\070\115\071\116\001\002" +
    "\000\034\022\uffa0\023\uffa0\024\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0\046\uffa0" +
    "\052\uffa0\001\002\000\034\022\uffa1\023\uffa1\024\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\037\uffa1\040\uffa1\043\uffa1" +
    "\044\uffa1\046\uffa1\052\uffa1\001\002\000\044\022\151\023" +
    "\uffa5\024\uffa5\027\uffa5\030\uffa5\031\uffa5\032\154\033\155" +
    "\034\157\035\160\036\152\037\uffa5\040\uffa5\043\uffa5\044" +
    "\uffa5\046\uffa5\052\uffa5\001\002\000\034\022\uffa3\023\uffa3" +
    "\024\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\037\uffa3\040" +
    "\uffa3\043\uffa3\044\uffa3\046\uffa3\052\uffa3\001\002\000\040" +
    "\023\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7\033\155\034" +
    "\157\035\160\036\152\037\uffa7\040\uffa7\043\uffa7\044\uffa7" +
    "\046\uffa7\052\uffa7\001\002\000\044\022\151\023\uffa4\024" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\154\033\155\034\157" +
    "\035\160\036\152\037\uffa4\040\uffa4\043\uffa4\044\uffa4\046" +
    "\uffa4\052\uffa4\001\002\000\034\022\uffa2\023\uffa2\024\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\037\uffa2\040\uffa2\043" +
    "\uffa2\044\uffa2\046\uffa2\052\uffa2\001\002\000\040\023\uffa8" +
    "\024\uffa8\027\uffa8\030\uffa8\031\uffa8\033\155\034\157\035" +
    "\160\036\152\037\uffa8\040\uffa8\043\uffa8\044\uffa8\046\uffa8" +
    "\052\uffa8\001\002\000\022\024\111\041\122\045\114\054" +
    "\120\066\112\067\134\070\115\071\116\001\002\000\044" +
    "\022\uff97\023\uff97\024\uff97\027\127\030\132\031\126\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\043\uff97\044\uff97\046\uff97\052\uff97\001\002\000\044\022" +
    "\uff98\023\uff98\024\uff98\027\127\030\132\031\126\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\043" +
    "\uff98\044\uff98\046\uff98\052\uff98\001\002\000\044\022\uff9a" +
    "\023\uff9a\024\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\043\uff9a" +
    "\044\uff9a\046\uff9a\052\uff9a\001\002\000\044\022\uff96\023" +
    "\uff96\024\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\043\uff96\044" +
    "\uff96\046\uff96\052\uff96\001\002\000\044\022\uffa6\023\uffa6" +
    "\024\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\043\uffa6\044\uffa6" +
    "\046\uffa6\052\uffa6\001\002\000\052\021\200\022\uff93\023" +
    "\uff93\024\uff93\025\106\026\104\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\043\uff93\046\uff93\051\103\053\107\001\002\000\022" +
    "\024\111\041\uffc4\045\uffc4\054\uffc4\066\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\001\002\000\004\054\202\001\002\000\044" +
    "\022\uff9d\023\uff9d\024\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\043\uff9d\044\uff9d\046\uff9d\052\uff9d\001\002\000\024\022" +
    "\151\032\154\033\155\034\157\035\160\036\152\037\156" +
    "\040\153\046\204\001\002\000\044\022\uff90\023\uff90\024" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\043\uff90\044\uff90\046" +
    "\uff90\052\uff90\001\002\000\026\022\151\032\154\033\155" +
    "\034\157\035\160\036\152\037\156\040\153\043\uffc6\046" +
    "\uffc6\001\002\000\054\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\043\uffca" +
    "\045\136\046\uffca\051\uffca\053\uffca\001\002\000\052\021" +
    "\210\022\uff93\023\uff93\024\uff93\025\106\026\104\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\040\uff93\043\uff93\046\uff93\051\103\053\107" +
    "\001\002\000\022\024\111\041\uffc5\045\uffc5\054\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000\004\066\212" +
    "\001\002\000\044\022\uff94\023\uff94\024\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94" +
    "\037\uff94\040\uff94\043\uff94\044\uff94\046\uff94\052\uff94\001" +
    "\002\000\044\022\uff9b\023\uff9b\024\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\043\uff9b\044\uff9b\046\uff9b\052\uff9b\001\002" +
    "\000\024\022\151\032\154\033\155\034\157\035\160\036" +
    "\152\037\156\040\153\052\215\001\002\000\056\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\043\uffcb\044\uffcb\046\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\022\024\111\041\122\045\114" +
    "\054\120\066\112\067\134\070\115\071\116\001\002\000" +
    "\024\022\151\032\154\033\155\034\157\035\160\036\152" +
    "\037\156\040\153\043\220\001\002\000\004\067\221\001" +
    "\002\000\014\021\uffca\025\uffca\026\uffca\051\uffca\053\uffca" +
    "\001\002\000\004\046\223\001\002\000\004\047\042\001" +
    "\002\000\046\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\050" +
    "\uffad\061\uffad\063\uffad\064\uffad\065\uffad\067\uffad\072\uffad" +
    "\001\002\000\006\021\231\044\230\001\002\000\010\021" +
    "\uffd3\043\uffd3\044\uffd3\001\002\000\004\043\uffac\001\002" +
    "\000\004\067\233\001\002\000\022\024\111\041\122\045" +
    "\114\054\120\066\112\067\134\070\115\071\116\001\002" +
    "\000\024\022\151\032\154\033\155\034\157\035\160\036" +
    "\152\037\156\040\153\043\uffcf\001\002\000\010\021\uffd4" +
    "\043\uffd4\044\uffd4\001\002\000\046\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\050\uffec\061\uffec\063\uffec\064\uffec\065" +
    "\uffec\067\uffec\072\uffec\001\002\000\046\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\050\uffed\061\uffed\063\uffed\064\uffed" +
    "\065\uffed\067\uffed\072\uffed\001\002\000\046\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\050\ufff1\061\ufff1\063\ufff1\064" +
    "\ufff1\065\ufff1\067\ufff1\072\ufff1\001\002\000\004\043\uffe8" +
    "\001\002\000\010\021\231\043\uffd0\044\230\001\002\000" +
    "\004\043\uffd1\001\002\000\004\043\uffd2\001\002\000\046" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\050\ufff2\061\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\067\ufff2\072\ufff2\001\002\000" +
    "\046\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\050\ufff0\061" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\072\ufff0\001\002" +
    "\000\022\024\111\041\122\045\114\054\120\066\112\067" +
    "\134\070\115\071\116\001\002\000\024\022\151\032\154" +
    "\033\155\034\157\035\160\036\152\037\156\040\153\046" +
    "\247\001\002\000\004\047\042\001\002\000\052\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbc\012\uffbc\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\050\uffbf" +
    "\061\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\072\uffbf\001" +
    "\002\000\006\011\253\012\252\001\002\000\004\047\042" +
    "\001\002\000\004\045\254\001\002\000\022\024\111\041" +
    "\122\045\114\054\120\066\112\067\134\070\115\071\116" +
    "\001\002\000\024\022\151\032\154\033\155\034\157\035" +
    "\160\036\152\037\156\040\153\046\256\001\002\000\004" +
    "\047\042\001\002\000\006\011\uffbd\012\uffbd\001\002\000" +
    "\046\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\050\uffbe\061" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\067\uffbe\072\uffbe\001\002" +
    "\000\022\024\111\041\122\045\114\054\120\066\112\067" +
    "\134\070\115\071\116\001\002\000\024\022\151\032\154" +
    "\033\155\034\157\035\160\036\152\037\156\040\153\046" +
    "\263\001\002\000\004\047\264\001\002\000\006\014\uffbb" +
    "\015\uffbb\001\002\000\006\014\uffb6\015\uffb6\001\002\000" +
    "\006\014\270\015\267\001\002\000\004\042\305\001\002" +
    "\000\012\054\275\066\271\070\273\071\274\001\002\000" +
    "\006\042\uffb5\053\303\001\002\000\004\042\300\001\002" +
    "\000\004\042\uffb3\001\002\000\004\042\uffb2\001\002\000" +
    "\004\072\276\001\002\000\004\054\277\001\002\000\004" +
    "\042\uffb1\001\002\000\044\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\072" +
    "\uffb8\001\002\000\044\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\072\ufff3" +
    "\001\002\000\044\004\012\005\022\006\030\007\065\010" +
    "\055\013\054\014\uffb7\015\uffb7\016\070\017\050\020\027" +
    "\061\051\063\026\064\011\065\025\067\052\072\013\001" +
    "\002\000\004\066\304\001\002\000\004\042\uffb4\001\002" +
    "\000\042\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\013" +
    "\uffba\016\uffba\017\uffba\020\uffba\050\uffba\061\uffba\063\uffba" +
    "\064\uffba\065\uffba\067\uffba\072\uffba\001\002\000\042\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\050\ufff3\061\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\067\ufff3\072\ufff3\001\002\000\042\004\012\005\022" +
    "\006\030\007\065\010\055\013\054\016\070\017\050\020" +
    "\027\050\310\061\051\063\026\064\011\065\025\067\052" +
    "\072\013\001\002\000\046\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\050\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9\067" +
    "\uffb9\072\uffb9\001\002\000\046\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\050\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\067\uffeb\072\uffeb\001\002\000\024\022\151\032\154\033" +
    "\155\034\157\035\160\036\152\037\156\040\153\043\313" +
    "\001\002\000\046\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\050\uffea\061\uffea\063\uffea\064\uffea\065\uffea\067\uffea\072" +
    "\uffea\001\002\000\004\045\315\001\002\000\022\024\111" +
    "\041\122\045\114\054\120\066\112\067\134\070\115\071" +
    "\116\001\002\000\024\022\151\032\154\033\155\034\157" +
    "\035\160\036\152\037\156\040\153\046\317\001\002\000" +
    "\004\047\042\001\002\000\046\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\050\uffa9\061\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\067\uffa9\072\uffa9\001\002\000\006\044\uff88\046\uff88\001" +
    "\002\000\020\004\012\005\022\006\030\063\026\064\011" +
    "\067\015\072\013\001\002\000\004\067\324\001\002\000" +
    "\006\044\uff89\046\uff89\001\002\000\004\067\226\001\002" +
    "\000\004\043\uffe9\001\002\000\020\004\012\005\022\006" +
    "\030\063\026\064\011\067\015\072\013\001\002\000\004" +
    "\067\336\001\002\000\022\004\012\005\022\006\030\050" +
    "\333\063\026\064\011\067\015\072\013\001\002\000\004" +
    "\067\334\001\002\000\010\051\uffe4\062\uffe4\067\uffe4\001" +
    "\002\000\004\043\335\001\002\000\022\004\uffe3\005\uffe3" +
    "\006\uffe3\050\uffe3\063\uffe3\064\uffe3\067\uffe3\072\uffe3\001" +
    "\002\000\004\043\337\001\002\000\022\004\uffe2\005\uffe2" +
    "\006\uffe2\050\uffe2\063\uffe2\064\uffe2\067\uffe2\072\uffe2\001" +
    "\002\000\004\067\341\001\002\000\004\043\uffe1\001\002" +
    "\000\004\043\343\001\002\000\026\004\ufff9\005\ufff9\006" +
    "\ufff9\020\ufff9\057\ufff9\063\ufff9\064\ufff9\065\ufff9\067\ufff9" +
    "\072\ufff9\001\002\000\012\021\uffd3\043\uffd3\044\uffd3\045" +
    "\345\001\002\000\022\004\012\005\022\006\030\046\uff86" +
    "\063\026\064\011\067\015\072\013\001\002\000\004\046" +
    "\347\001\002\000\004\047\uff85\001\002\000\004\047\042" +
    "\001\002\000\026\004\uff84\005\uff84\006\uff84\020\uff84\057" +
    "\uff84\063\uff84\064\uff84\065\uff84\067\uff84\072\uff84\001\002" +
    "\000\004\043\353\001\002\000\026\004\ufffb\005\ufffb\006" +
    "\ufffb\020\ufffb\057\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb" +
    "\072\ufffb\001\002\000\012\024\111\045\114\066\112\067" +
    "\134\001\002\000\010\051\356\062\uffd9\067\uffd9\001\002" +
    "\000\012\024\111\045\114\066\112\067\134\001\002\000" +
    "\016\023\130\024\131\027\127\030\132\031\126\052\360" +
    "\001\002\000\010\051\uffdc\062\uffdc\067\uffdc\001\002\000" +
    "\016\023\130\024\131\027\127\030\132\031\126\052\362" +
    "\001\002\000\010\051\uffdb\062\uffdb\067\uffdb\001\002\000" +
    "\010\051\356\062\uffda\067\uffda\001\002\000\020\004\012" +
    "\005\022\006\030\063\026\064\011\067\015\072\013\001" +
    "\002\000\022\004\012\005\022\006\030\050\366\063\026" +
    "\064\011\067\015\072\013\001\002\000\010\051\uffe5\062" +
    "\uffe5\067\uffe5\001\002\000\004\062\371\001\002\000\004" +
    "\002\000\001\002\000\004\047\042\001\002\000\004\002" +
    "\ufff5\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\055\003\056\004\001\001\000\002\001" +
    "\001\000\030\011\020\012\016\013\013\014\015\015\022" +
    "\016\006\020\005\031\017\050\031\051\007\054\023\001" +
    "\001\000\004\057\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\354\001\001\000\004\060\351\001" +
    "\001\000\012\032\236\033\241\034\240\035\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\341\001" +
    "\001\000\016\011\337\012\016\013\013\014\015\015\022" +
    "\016\006\001\001\000\002\001\001\000\016\011\324\012" +
    "\016\013\013\014\015\015\022\016\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\035\012\016\013\013\014\015\015\022" +
    "\016\006\024\034\030\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\040\001\001" +
    "\000\004\021\042\001\001\000\004\062\043\001\001\000" +
    "\002\001\001\000\004\023\044\001\001\000\050\002\045" +
    "\005\066\006\046\007\062\010\070\011\060\012\016\013" +
    "\013\014\015\015\022\016\006\031\057\036\055\037\071" +
    "\040\072\045\052\046\061\047\065\054\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\313\001\001" +
    "\000\012\040\124\041\122\042\311\047\123\001\001\000" +
    "\004\043\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\032\236\033\241\034\240\035\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\075" +
    "\012\016\013\013\014\015\015\022\016\006\036\077\037" +
    "\071\040\072\044\076\001\001\000\006\034\226\035\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\101\001\001\000\002\001\001\000\012\040\124\041\122" +
    "\042\213\047\123\001\001\000\002\001\001\000\014\022" +
    "\112\040\124\041\122\042\116\047\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\124\041\212\047\123\001\001\000\002\001\001\000\012" +
    "\040\124\041\122\042\204\047\123\001\001\000\012\040" +
    "\124\041\122\042\202\047\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\176\001\001\000\012\040\124\041\122\042\175" +
    "\047\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\124\041\174\047\123\001\001" +
    "\000\010\040\124\041\173\047\123\001\001\000\010\040" +
    "\124\041\172\047\123\001\001\000\010\040\124\041\171" +
    "\047\123\001\001\000\010\040\124\041\132\047\123\001" +
    "\001\000\002\001\001\000\004\043\134\001\001\000\002" +
    "\001\001\000\016\026\136\027\142\040\124\041\122\042" +
    "\140\047\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\145\040\124\041\122\042\140\047\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\147\001" +
    "\001\000\002\001\001\000\012\040\124\041\122\042\167" +
    "\047\123\001\001\000\012\040\124\041\122\042\166\047" +
    "\123\001\001\000\012\040\124\041\122\042\165\047\123" +
    "\001\001\000\012\040\124\041\122\042\164\047\123\001" +
    "\001\000\012\040\124\041\122\042\163\047\123\001\001" +
    "\000\012\040\124\041\122\042\162\047\123\001\001\000" +
    "\012\040\124\041\122\042\161\047\123\001\001\000\012" +
    "\040\124\041\122\042\160\047\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\124\041\122\042\116\047\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\040\124\041\122\042\116\047\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\206\001\001\000" +
    "\002\001\001\000\012\040\124\041\122\042\116\047\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\040\124" +
    "\041\122\042\216\047\123\001\001\000\002\001\001\000" +
    "\010\036\221\037\071\040\072\001\001\000\004\043\101" +
    "\001\001\000\002\001\001\000\004\021\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\040\124\041\122\042" +
    "\231\047\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\040" +
    "\124\041\122\042\245\047\123\001\001\000\002\001\001" +
    "\000\004\021\247\001\001\000\004\003\250\001\001\000" +
    "\002\001\001\000\004\021\257\001\001\000\002\001\001" +
    "\000\012\040\124\041\122\042\254\047\123\001\001\000" +
    "\002\001\001\000\004\021\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\124\041\122\042\261\047" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\264\001\001\000\004\004\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\300\001\001\000\004\023\301\001\001\000" +
    "\050\002\045\005\066\006\046\007\062\010\070\011\060" +
    "\012\016\013\013\014\015\015\022\016\006\031\057\036" +
    "\055\037\071\040\072\045\052\046\061\047\065\054\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\305\001\001\000\004\023\306\001\001\000\050\002\045" +
    "\005\066\006\046\007\062\010\070\011\060\012\016\013" +
    "\013\014\015\015\022\016\006\031\057\036\055\037\071" +
    "\040\072\045\052\046\061\047\065\054\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\040\124\041\122\042" +
    "\315\047\123\001\001\000\002\001\001\000\004\021\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\322\012\016\013\013\014\015\015\022\016\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\325\033" +
    "\241\034\240\035\237\001\001\000\002\001\001\000\020" +
    "\011\327\012\016\013\013\014\015\015\022\016\006\025" +
    "\330\001\001\000\002\001\001\000\016\011\331\012\016" +
    "\013\013\014\015\015\022\016\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\011\035\012\016\013\013\014\015\015" +
    "\022\016\006\024\034\030\345\001\001\000\002\001\001" +
    "\000\004\070\347\001\001\000\004\021\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\124\041\360\047\123\001\001\000\002\001\001\000" +
    "\010\040\124\041\356\047\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\327\012\016\013\013\014\015" +
    "\015\022\016\006\025\364\001\001\000\016\011\331\012" +
    "\016\013\013\014\015\015\022\016\006\001\001\000\002" +
    "\001\001\000\004\053\367\001\001\000\002\001\001\000" +
    "\004\021\371\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
    
    public SymTable anterior = null;
    public SymTable actual = new SymTable(anterior);
    public SymTable alias_anterior = null;
    public SymTable alias_actual = new SymTable(alias_anterior);
    public Tipo tipoactual;
    public Tipo tipoactualfun;
    public int canBreak = 0;
    public boolean error = false;
    public boolean syntaxErrors = false;
    public boolean returning;
    public boolean breaking;
    public boolean inFun = false;
    public boolean inProc = false;
    public int anidamiento = -1;
    public boolean cambiada = false;
    public boolean procDeclared = false;
    public ASTAcceso last;
    public LinkedList in;
    public LinkedList procedimientos  = new LinkedList();
    public LinkedList globales = new LinkedList();
    public Lexer lexer;
    
    public Parser(Lexer lex) {
	super(lex);
	lexer = lex;
    }
    
    public void report_error(String message, Object info) {
	syntaxErrors = true;
	
	System.out.print(message);
	
	if ( !(info instanceof Symbol) ) return;
	Symbol symbol = (Symbol) info;
	
	if ( symbol.left < 0 || symbol.right < 0 ) return;
	
	System.out.println(" en la linea "+symbol.left+", columna "+symbol.right);
    }
    
    public void warning(String msg) {
	error = true;
	System.out.println("Precaucion: "+msg+" en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".");
    }
    
    public void custom_error(String msg) {
	error = true;
	System.out.println(msg+" en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".");
    }
    
    public void crash_error(String msg) throws Exception {
	report_fatal_error(msg+" en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".\n",null);
    }
    
    public void type_declaration(String var) {
	error = true;
	System.out.println("Tipo "+var+" no declarado en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".");
    }
    
    public void used_error(String var) throws Exception {
	report_fatal_error("Variable "+var+" anteriormente declarada en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".\n",null);
    }

    public void declaration_error(String var) {
	error = true;
	System.out.println("Variable "+var+" no declarada en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".");
    }
    
    public void type_error(Tipo t1, Tipo t2, String operacion) {
	if(t1!=null) {
	    error = true;
	    if(t2 != null)
		System.out.println("No puede "+operacion+" "+t1+" con "+t2+" en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".");
	    else
		System.out.println("No puede "+operacion+" con "+t1+" en la linea "+lexer.getLine()+", columna "+lexer.getColumn()+".");
	}
    }
    
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // declaracionprocedimiento ::= VOID IDENTIFIER PARLEFT parametros PARRIGHT NT$10 bloque 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              parser.inProc = false; 
		                          parser.cambiada = false;

                              Sym s = parser.actual.getSym(i);

                              if( s != null && (s instanceof SymProc))
                                ((SymProc) s).getBloque().setInsts(b.getInsts());
		                          
		                          RESULT = i;                              
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionprocedimiento",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$10 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 
                              parser.inProc = true; 
		                          parser.cambiada = true;
		                          parser.anterior = parser.actual;
		                          parser.actual = new SymTable(parser.anterior);
		                          parser.anidamiento++;
		                          
		                          parser.tipoactualfun = new Basico(0);
		                          
		                          ASTIdentificador id;
		                          SymVar s;
		                          
		                          Iterator it = l.iterator();
		                          
		                          while(it.hasNext()) 
                              {
			                          id = (ASTIdentificador) it.next();
			                          s = new SymVar(id.getValue(), id.getState(), false);
			                          if(!parser.actual.insert(s, parser.anidamiento))
		                              parser.used_error(id.getValue());
		                          }

		                          SymProc p = new SymProc(i,new Basico(0), parser.in, new ASTBloque(new LinkedList(),parser.actual));
		                          
		                          if(!parser.anterior.insert(p, parser.anidamiento))
			                          parser.used_error(i);

                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // declaracionfuncion ::= tipos IDENTIFIER PARLEFT parametros PARRIGHT NT$9 bloque 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        parser.inFun = false; 
		                  	parser.cambiada = false;
			
                        Sym s = parser.actual.getSym(i);

                        if( s != null && (s instanceof SymProc))
                          ((SymProc) s).getBloque().setInsts(b.getInsts());		
			
			                  if(!b.getIreturn())
			                      parser.custom_error("Tiene que retornar "+t+" en la funcion "+i);
						
			                  RESULT = i;                              
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionfuncion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$9 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 
                        parser.inFun = true; 
			                  parser.cambiada = true;
			                  parser.anterior = parser.actual;
			                  parser.actual = new SymTable(parser.anterior);
			                  parser.anidamiento++;
			
			                  parser.tipoactualfun = t;
			
			                  ASTIdentificador id;
			                  SymVar s;
			
			                  Iterator it = l.iterator();
			
			                  while(it.hasNext()) {
			                      id = (ASTIdentificador) it.next();
			                      s = new SymVar(id.getValue(), id.getState(), false);
			                      if(!parser.actual.insert(s, parser.anidamiento))
				                  parser.used_error(id.getValue());
                                              
			                  }

                        SymProc p = new SymProc(i,t, parser.in, new ASTBloque(new LinkedList(),parser.actual));
		                          
                        if(!parser.anterior.insert(p, parser.anidamiento))
                          parser.used_error(i);

                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros ::= 
            {
              LinkedList RESULT =null;
		
                parser.in = new LinkedList();
		RESULT = new LinkedList();
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros ::= listaparametros 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // listaparametros ::= tipos IDENTIFIER 
            {
              LinkedList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     parser.in = new LinkedList();
		     parser.in.add(i);
		     LinkedList l = new LinkedList();
		     ASTIdentificador id = new ASTIdentificador(i, null,null, t);
		     l.add(id);
		     RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparametros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // listaparametros ::= listaparametros COMA tipos IDENTIFIER 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                     ASTIdentificador id = new ASTIdentificador(i, null,null, t);
		     parser.in.add(i);
		     l.add(id);
		     RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparametros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // llamadafuncion ::= IDENTIFIER PARLEFT listaparametrosllamada PARRIGHT 
            {
              ASTInvocar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Sym s = parser.actual.getSym(i);
		    Tipo state;
		    
		    if(s != null)
			state = s.getState();
		    else
			state = null;
		    
		    ASTInvocar re  = new ASTInvocar(i, (LinkedList)l.getFirst(), (LinkedList)l.getLast(), state);
		    
		    if(s != null) {
			if(!(s instanceof SymProc)) {
			    parser.custom_error("Variable "+i+" no es un procedimiento/funcion");
			}
			else {
			    if(!re.check((SymProc)s))
				parser.custom_error("Mala llamada al procedimiento/funcion "+i);
			}
		    }
		    
		    RESULT = re;
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // llamadafuncion ::= IDENTIFIER PARLEFT PARRIGHT 
            {
              ASTInvocar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Sym s = parser.actual.getSym(i);
		    Tipo state;
		    
		    if(s != null)
			state = s.getState();
		    else
			state = null;
		    		    
		    ASTInvocar re  = new ASTInvocar(i, new LinkedList(), new LinkedList(), state);		    

		    if(s != null) {
			if(!(s instanceof SymProc)) {
			    parser.custom_error("Variable "+i+" no es un procedimiento/funcion");
			}
			else {
			    if(!re.check((SymProc)s))
				parser.custom_error("Mala llamada al procedimiento/funcion "+i);
			}
		    }

		    RESULT = re;
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listaparametrosllamada ::= parametrosllamada 
            {
              LinkedList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            LinkedList l1 = new LinkedList();
			    l1.add(p.getFirst());
			    LinkedList l2 = new LinkedList();
			    l2.add(p.getLast());
			    LinkedList l = new LinkedList();
			    l.add(l1);
			    l.add(l2);
			    RESULT = l;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparametrosllamada",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // listaparametrosllamada ::= listaparametrosllamada COMA parametrosllamada 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            ((LinkedList)l.getFirst()).add(p.getFirst());
			    ((LinkedList)l.getLast()).add(p.getLast());
			    RESULT = l;
                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparametrosllamada",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametrosllamada ::= REF IDENTIFIER acceso 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAcceso a = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                       Tipo state = parser.actual.exist(i);
		       LinkedList l = new LinkedList();
		       
		       ASTIdentificador iden = new ASTIdentificador(i, parser.actual, a, state);
		       l.add(new Boolean(true));
		       
		       if (state != null) {
			   iden.update();
			   if(!iden.check())
			       parser.custom_error("Mal acceso al idenficicador "+i);
		       } 
		       else parser.declaration_error(i);
		       
		       l.add(iden);
		       RESULT = l;
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosllamada",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametrosllamada ::= expresion 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		       LinkedList l = new LinkedList();
		       l.add(new Boolean(false));
		       l.add(e);
		       RESULT = l;
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosllamada",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionarit ::= PARLEFT expresion PARRIGHT 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionarit ::= llamadafuncion 
            {
              ASTExpresion RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTInvocar in = (ASTInvocar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   ASTInvocarExpresion ie = in.toExpresion();
                   RESULT = ie;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionarit ::= asignacion1 
            {
              ASTExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacionExpr a = (ASTAsignacionExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresionarit ::= IDENTIFIER acceso 
            {
              ASTExpresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAcceso a = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   Tipo state = parser.actual.exist(i);
                   ASTIdentificador iden = new ASTIdentificador(i, parser.actual, a, state);
                   if (state != null) {
		       iden.update();
		       if(!iden.check())
			   parser.custom_error("Mal acceso al idenficicador "+i);
		   } 
                   else parser.declaration_error(i);
		   
                   RESULT = iden;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresionarit ::= NUM DOT NUM 
            {
              ASTExpresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   Float f = new Float(n1+"."+n2);
                   RESULT = new ASTConst(f.floatValue()); 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionarit ::= NUM 
            {
              ASTExpresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTConst(n.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionarit ::= expresionarit MOD expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   ASTExpresion exp = new ASTAritmetica("%", e1, e2);
                   exp.update();
                   if(!exp.check())
		       parser.type_error(e1.getState(), e2.getState(),"sacar módulo a");
                   RESULT = exp;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionarit ::= expresionarit MINUS expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   ASTExpresion exp = new ASTAritmetica("-", e1, e2);
                   exp.update();
                   if(!exp.check())
		       parser.type_error(e1.getState(), e2.getState(),"restar");
                   RESULT = exp;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionarit ::= expresionarit PLUS expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   ASTExpresion exp = new ASTAritmetica("+", e1, e2);
                   exp.update();
                   if(!exp.check())
		       parser.type_error(e1.getState(), e2.getState(),"sumar");
                   RESULT = exp;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionarit ::= expresionarit DIV expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   ASTExpresion exp = new ASTAritmetica("/", e1, e2);
                   exp.update();
                   if(!exp.check())
		       parser.type_error(e1.getState(), e2.getState(),"dividir");
                   RESULT = exp;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionarit ::= expresionarit MULT expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   ASTExpresion exp = new ASTAritmetica("*", e1, e2);
                   exp.update();
                   if(!exp.check())
		       parser.type_error(e1.getState(), e2.getState(),"multiplicar");
                   RESULT = exp;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionarit ::= MINUS expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   ASTExpresion exp = new ASTAritmetica("-", e1, null);
		   exp.update();
		   if(!exp.check())
		       parser.type_error(e1.getState(), null,"hacer resta unaria");
		   RESULT = exp;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionarit",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresionarit 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= COMILLAS CHAR COMILLAS 
            {
              ASTExpresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ASTConst(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= TRUE 
            {
              ASTExpresion RESULT =null;
		 RESULT = new ASTConst(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= FALSE 
            {
              ASTExpresion RESULT =null;
		 RESULT = new ASTConst(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion MOREEQ expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool(">=", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"comparar");
	       RESULT = exp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion MORE expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool(">", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"comparar");
	       RESULT = exp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion LESSEQ expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool("<=", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"comparar");
	       RESULT = exp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion LESS expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool("<", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"comparar");
	       RESULT = exp;
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion AND expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool("&&", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"hacer un AND con");
	       RESULT = exp;
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion OR expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool("||", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"hacer un OR con");
	       RESULT = exp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= NOT expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               ASTExpresion exp = new ASTBool("!", e1, null);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), null,"negar");
	       RESULT = exp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion NOTEQ expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	       ASTExpresion exp = new ASTBool("!=", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"desigualar");
	       RESULT = exp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion EQ expresion 
            {
              ASTExpresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e1 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e2 = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	       ASTExpresion exp = new ASTBool("==", e1, e2);
	       exp.update();
	       if(!exp.check())
		   parser.type_error(e1.getState(), e2.getState(),"equivaler");
	       RESULT = exp;
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // loopwhile ::= WHILE NT$8 PARLEFT expresion PARRIGHT bloque 
            {
              ASTWhile RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (ASTWhile) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               Tipo t = e.getState();
	       
	       if(e.getCanCheck()) {
		   if(!(t instanceof Basico))
		       parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del while");
		   else { 
		       Basico ba = (Basico) t;
		       
		       if(ba.getNBasico() != 3)
			   parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del while");
		   }
	       }
	       
	       parser.canBreak--;
	       RESULT = new ASTWhile(e, b);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopwhile",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$8 ::= 
            {
              ASTWhile RESULT =null;
 parser.canBreak++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaasig ::= asignacion 
            {
              ASTAsignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion a = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaasig",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaasig ::= tipos declaracionsimple2 
            {
              ASTAsignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               ASTIdentificador i;
	       SymVar s;
	       
	       Iterator it = l.getIds().iterator();
	       
	       ASTExpresion e = l.getExpr();
	       Tipo res = null;
	       
	       res = t.asign(e.getState());
	       if(res == null)
		   parser.type_error(t,e.getState(),"asignar");
	       else
		   l.setState(res);
	       	       
	       while(it.hasNext()) {
		   i = (ASTIdentificador) it.next();
		   i.setState(t);
		   s = new SymVar(i.getValue(), t, false);
		   s.setAsigned(true);
		   if(!parser.actual.insert(s, parser.anidamiento))
		       parser.used_error(i.getValue());                   
	       }

	       RESULT = l;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaasig",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // loopfor ::= FOR NT$7 PARLEFT declaasig SEQ expresion SEQ asignacion PARRIGHT bloque 
            {
              ASTWhile RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (ASTWhile) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTAsignacion d = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTAsignacion a = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	     Tipo t = e.getState();

	     if(e.getCanCheck()) {
		 if(!(t instanceof Basico))
		     parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del for");
		 else { 
		     Basico ba = (Basico) t;
		     
		     if(ba.getNBasico() != 3)
			 parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del for");
		 }
	     }
               
	     b.getInsts().addFirst(d);
	     b.getInsts().add(a);
	     
	     parser.cambiada = false;
	     parser.canBreak--;
	     
	     RESULT = new ASTWhile(e, b);	     
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopfor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$7 ::= 
            {
              ASTWhile RESULT =null;

	     parser.anterior = parser.actual;
	     parser.actual = new SymTable(parser.anterior);
	     parser.cambiada = true;
	     parser.canBreak++;
	     parser.anidamiento++;
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop ::= loopwhile 
            {
              ASTWhile RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTWhile w = (ASTWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop ::= loopfor 
            {
              ASTWhile RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTWhile f = (ASTWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constantes ::= COMILLAS CHAR COMILLAS 
            {
              ASTConst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		Basico ch = new Basico(4);
		
		if(parser.tipoactual.compare(ch) == null)
		    parser.type_error(parser.tipoactual, ch, "hacer switch de");
		
		RESULT = new ASTConst(c);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constantes ::= FALSE 
            {
              ASTConst RESULT =null;
		
                Basico bo = new Basico(3);
		
		if(parser.tipoactual.compare(bo) == null)
		    parser.type_error(parser.tipoactual, bo, "hacer switch de");		
		
		RESULT = new ASTConst(false);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // constantes ::= TRUE 
            {
              ASTConst RESULT =null;
		
		Basico bo = new Basico(3);
		
		if(parser.tipoactual.compare(bo) == null)
		    parser.type_error(parser.tipoactual, bo, "hacer switch de");
				
		RESULT = new ASTConst(true);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constantes ::= NUM DOT NUM 
            {
              ASTConst RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Basico flo = new Basico(2);
		
		if(parser.tipoactual.compare(flo) == null)
		    parser.type_error(parser.tipoactual, flo, "hacer switch de");
				
		Float f = new Float(n1+"."+n2);
		RESULT = new ASTConst(f.floatValue());
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // constantes ::= NUM 
            {
              ASTConst RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                Basico en = new Basico(1);
		if(parser.tipoactual.compare(en) == null)
		    parser.type_error(parser.tipoactual, en, "hacer switch de");
		RESULT = new ASTConst(n.intValue());
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listacase ::= 
            {
              ASTSwitch RESULT =null;
		 RESULT = new ASTSwitch(null,new LinkedList(), new LinkedList(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listacase ::= listacase CASE constantes DOSPUNTOS NT$6 listainstrucciones 
            {
              ASTSwitch RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ASTSwitch) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTSwitch l = (ASTSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTConst c = (ASTConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               l.getCases().add(c);
	       l.getBloques().add(new ASTBloque(b, parser.actual));
	       parser.anidamiento--;
	       parser.actual = parser.anterior; 
	       parser.anterior = parser.anterior.getParent();
	       parser.alias_actual = parser.alias_anterior; 
	       parser.alias_anterior = parser.alias_anterior.getParent();
	       RESULT = l;
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listacase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$6 ::= 
            {
              ASTSwitch RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTSwitch l = (ASTSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTConst c = (ASTConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

	       parser.anterior = parser.actual;
	       parser.actual = new SymTable(parser.anterior);
	       parser.alias_anterior = parser.alias_actual;
	       parser.alias_actual = new SymTable(parser.alias_anterior);
	       parser.anidamiento++;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conswitch ::= SWITCH PARLEFT expresion PARRIGHT BRACKETLEFT NT$4 listacase DEFAULT DOSPUNTOS NT$5 listainstrucciones BRACKETRIGHT 
            {
              ASTSwitch RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ASTSwitch) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTSwitch l = (ASTSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.setDef(new ASTBloque(b, parser.actual));
                l.setExp(e);
                parser.actual = parser.anterior; 
                parser.anterior = parser.anterior.getParent();
                RESULT = l;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conswitch",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$5 ::= 
            {
              ASTSwitch RESULT =(ASTSwitch) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTSwitch l = (ASTSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                parser.anterior = parser.actual;
                parser.actual = new SymTable(parser.anterior);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$4 ::= 
            {
              ASTSwitch RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                parser.tipoactual = e.getState();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaelif ::= 
            {
              ASTIf RESULT =null;
		 RESULT = new ASTIf(new LinkedList(), new LinkedList(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelif",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaelif ::= listaelif ELIF PARLEFT expresion PARRIGHT bloque 
            {
              ASTIf RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTIf l = (ASTIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               Tipo t = e.getState();
	       
	       if(e.getCanCheck()) {
		   if(!(t instanceof Basico))
		       parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del elif");
		   else { 
		       Basico ba = (Basico) t;
		       
		       if(ba.getNBasico() != 3)
			   parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del elif");
		   }
	       }
	       	       
	       l.getCond().add(e);
	       l.getBloques().add(b);
	       RESULT = l;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaelif",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conif ::= IF PARLEFT expresion PARRIGHT bloque listaelif ELSE bloque 
            {
              ASTIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTBloque b1 = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTIf l = (ASTIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b2 = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           Tipo t = e.getState();
	   
	   if(e.getCanCheck()) {
	       if(!(t instanceof Basico))
		   parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del if");
	       else { 
		   Basico ba = (Basico) t;
		   
		   if(ba.getNBasico() != 3)
		       parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del if");
	       }
	   }

	   l.getCond().add(e);
	   l.getBloques().add(b1);
	   l.setEls(b2);
	   
	   RESULT = l;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conif",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conif ::= IF PARLEFT expresion PARRIGHT bloque 
            {
              ASTIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           LinkedList blq = new LinkedList();
	   blq.add(b);
	   LinkedList cif = new LinkedList();
	   
	   Tipo t = e.getState();
	   if(e.getCanCheck()) {
	       if(!(t instanceof Basico))
		   parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del if");
	       else { 
		   Basico ba = (Basico) t;
		   
		   if(ba.getNBasico() != 3)
		       parser.custom_error("Tiene que usar expresiones booleanas en los condicionales del if");
	       }
	   }             
	   
	   cif.add(e);
	   ASTIf instif = new ASTIf(cif, blq, null);
	   RESULT = instif;	   
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conif",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque ::= BRACKETLEFT NT$3 listainstrucciones BRACKETRIGHT 
            {
              ASTBloque RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ASTBloque) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    ASTBloque b = new ASTBloque(l,parser.actual);
	    
	    b.setIreturn(parser.returning);
	    b.setIbreak(parser.breaking);
	    
	    parser.actual = parser.anterior; 
	    parser.anterior = parser.anterior.getParent();
	    parser.alias_actual = parser.alias_anterior; 
	    parser.alias_anterior = parser.alias_anterior.getParent();
	    
	    parser.anidamiento--;
	    parser.returning = false;
	    parser.breaking = false;
	    
	    RESULT = b;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$3 ::= 
            {
              ASTBloque RESULT =null;
 
            parser.returning = false;
	    parser.breaking = false;

	    if(!parser.cambiada) {
		parser.anidamiento++;
		parser.anterior = parser.actual;
		parser.actual = new SymTable(parser.anterior);
	    } 

	    parser.cambiada = false;
	    parser.alias_anterior = parser.alias_actual;
	    parser.alias_actual = new SymTable(parser.alias_anterior);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicional ::= conswitch 
            {
              ASTInstruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTSwitch s = (ASTSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicional ::= conif 
            {
              ASTInstruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTIf i = (ASTIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaasig ::= IDENTIFIER acceso ASIG 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTAcceso a = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	       Tipo state = parser.actual.exist(i);
	       if (state != null) {
		   LinkedList l = new LinkedList();
		   l.add(new ASTIdentificador(i, parser.actual,a, state));
		   RESULT = l;
	       }
	       else parser.declaration_error(i);
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaasig",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaasig ::= listaasig IDENTIFIER acceso ASIG 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTAcceso a = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
               Tipo state = parser.actual.exist(i);
	       if (state != null) {
		   l.addFirst(new ASTIdentificador(i, parser.actual,a, state));
		   RESULT = l;
	       }
	       else parser.declaration_error(i);
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaasig",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion2 ::= IDENTIFIER acceso ASIG listaasig expresion 
            {
              ASTAsignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTAcceso ac = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 ASTIdentificador a;
		 String id;
		 Tipo res = null;
		 Tipo state = parser.actual.exist(i);
		 
		 if (state == null) 
		     parser.declaration_error(i);
		 
		 l.add(new ASTIdentificador(i, parser.actual, ac, state));
		 
		 Iterator it = l.iterator();
		 a = (ASTIdentificador) it.next();		 
		 id = a.getValue();		 
		 a.update();
		 
		 if(!a.check())
		     parser.custom_error("Mal acceso al idenficicador "+id);
		 
		 if(e.getCanCheck()) {
		     res = a.getState().asign(e.getState());
		     
		     if(res != null)
			 state = res;
		     else
			 parser.type_error(a.getState(),e.getState() ,"asignar");
		 }
		 
		 while(it.hasNext()) {		     
		     a = (ASTIdentificador) it.next();
		     id = a.getValue();
		     
		     a.update();
		     
		     if(!a.check())
			 parser.custom_error("Mal acceso al idenficicador "+id);
		     
		     if(e.getCanCheck()) {
			 res = a.getState().asign(res);
			 
			 if(res != null)
			     state = res;
			 else
			     parser.type_error(a.getState(),state ,"asignar");
		     }		     
		 }

		 ASTAsignacion re = new ASTAsignacion(l, e, state );
		 re.setCanCheck(e.getCanCheck());
		 RESULT = re;
	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion1 ::= IDENTIFIER acceso MINUSMINUS 
            {
              ASTAsignacionExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTAcceso ac = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 Tipo state = parser.actual.exist(i);
		 
		 if (state == null) 
		     parser.declaration_error(i);
		 
		 ASTIdentificador id = new ASTIdentificador(i, parser.actual, ac, state);		 
		 id.update();

		 if(!id.check())
		     parser.custom_error("Mal acceso al idenficicador "+id.getValue());
		 
		 ASTAritmetica exp = new ASTAritmetica("-",id, new ASTConst(1));		 
		 exp.update();
		 
		 if(!exp.check())
		     parser.type_error(state, null, "hacer resta posterior");
		 
		 Tipo res = id.getState().asign(exp.getState());
		 
		 if(res != null)
		     state = res;
		 else
		     parser.type_error(id.getState(),exp.getState() ,"asignar");
		 
		 RESULT = new ASTAsignacionExpr(id, exp, res);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion1 ::= IDENTIFIER acceso PLUSPLUS 
            {
              ASTAsignacionExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTAcceso ac = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 Tipo state = parser.actual.exist(i);
		 
		 if (state == null) 
		     parser.declaration_error(i);
		 
		 ASTIdentificador id = new ASTIdentificador(i, parser.actual, ac, state);		 
		 id.update();
		 
		 if(!id.check())
		     parser.custom_error("Mal acceso al idenficicador "+id.getValue());
		 
		 ASTAritmetica exp = new ASTAritmetica("+",id, new ASTConst(1));		 
		 exp.update();
		 
		 if(!exp.check())
		     parser.type_error(state, null, "hacer suma posterior");
		 
		 Tipo res = id.getState().asign(exp.getState());

		 if(res != null)
		     state = res;
		 else
		     parser.type_error(id.getState(),exp.getState() ,"asignar");
		 
		 RESULT = new ASTAsignacionExpr(id, exp, res);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion1 ::= IDENTIFIER acceso ASIG expresion 
            {
              ASTAsignacionExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTAcceso ac = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 Tipo state = parser.actual.exist(i);
		 
		 if (state == null) 
		     parser.declaration_error(i);
		 
		 ASTIdentificador id = new ASTIdentificador(i, parser.actual, ac, state);		 
		 id.update();

		 if(!id.check())
		     parser.custom_error("Mal acceso al idenficicador "+id.getValue());
		 
		 if(e.getCanCheck()) {
		     Tipo res = id.getState().asign(e.getState());
		     
		     if(res != null)
			 state = res;
		     else
			 parser.type_error(id.getState(),e.getState() ,"asignar");
		 }
             
	     	 ASTAsignacionExpr re = new ASTAsignacionExpr(id, e, state );
	     	 re.setCanCheck(e.getCanCheck());
	     	 RESULT = re;
	     	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // acceso ::= 
            {
              ASTAcceso RESULT =null;
		 RESULT = new ASTAcceso(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("acceso",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // acceso ::= acceso CORLEFT expresion CORRIGHT 
            {
              ASTAcceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTAcceso a = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    if(e.getCanCheck()) {
		Tipo t = e.getState();
		
		if(!(t instanceof Basico))
		    parser.custom_error("Tiene que usar int para acceder a un arreglo");
		else { 
		    Basico ba = (Basico) t;
		    
		    if(ba.getNBasico() != 1)
			parser.custom_error("Tiene que usar int para acceder a un arreglo");
		}
            }

            ASTAcceso res;

            if(a.isNull()) {
		res = new ASTAccesoArreglo(a,e);
		parser.last = res;
            }
            else {
		parser.last.setHijo(new ASTAccesoArreglo(parser.last.getHijo(),e));
		parser.last = parser.last.getHijo();
		res = a;
            }
	    
            RESULT = res;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("acceso",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // acceso ::= acceso DOT IDENTIFIER 
            {
              ASTAcceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTAcceso a = (ASTAcceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTAcceso res;

            if(a.isNull()) {
		res = new ASTAccesoUR(a,c);
		parser.last = res;
            }
            else {
		parser.last.setHijo(new ASTAccesoUR(parser.last.getHijo(),c));
		parser.last = parser.last.getHijo();
		res = a;
            }
	    
            RESULT = res;              
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("acceso",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= asignacion2 
            {
              ASTAsignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion a = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= asignacion1 
            {
              ASTAsignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacionExpr a = (ASTAsignacionExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.getASTAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracionsimple2 ::= listaident ASIG expresion 
            {
              ASTAsignacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			l.setExpr(e);
			RESULT = l;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionsimple2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracionsimple1 ::= listaident 
            {
              ASTAsignacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionsimple1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracionsimple ::= declaracionsimple2 
            {
              ASTAsignacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionsimple",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionsimple ::= declaracionsimple1 
            {
              ASTAsignacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionsimple",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaident ::= IDENTIFIER 
            {
              ASTAsignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ASTAsignacion a = new ASTAsignacion(new LinkedList(), null, null); 
		a.getIds().add(new ASTIdentificador(i, parser.actual, null, null));
		RESULT = a;
	       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaident",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listaident ::= listaident COMA IDENTIFIER 
            {
              ASTAsignacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                l.getIds().add(new ASTIdentificador(i, parser.actual, null, null));
                RESULT = l; 
	       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaident",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // basicos ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Basico(4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // basicos ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Basico(3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // basicos ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT = new Basico(2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // basicos ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Basico(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arreglos ::= complejos listadimension 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo l = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              Arreglo a = (Arreglo)l;
	      while(a.getSub() != null)
		  a = (Arreglo)a.getSub();
	      a.setSub(t);
	      RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arreglos ::= basicos listadimension 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo l = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              Arreglo a = (Arreglo)l;
	      while(a.getSub() != null)
		  a = (Arreglo)a.getSub();
	      a.setSub(t);
	      RESULT = l;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listadimension ::= CORLEFT expresionarit CORRIGHT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		    if(e.getCanCheck()) {
			Tipo t = e.getState();
			
			if(!(t instanceof Basico))
			    parser.custom_error("Tiene que usar int para definir la dimensión de un arreglo");
			else { 
			    Basico ba = (Basico) t;
			    
			    if(ba.getNBasico() != 1)
				parser.custom_error("Tiene que usar int para definir la dimensión de un arreglo");
			}
		    }
		    
		    RESULT = new Arreglo((ASTExpresion) e, null); 
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadimension",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listadimension ::= listadimension CORLEFT expresionarit CORRIGHT 
            {
              Tipo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo l = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(e.getCanCheck()) {
			Tipo t = e.getState();
			
			if(!(t instanceof Basico))
			    parser.custom_error("Tiene que usar int para definir la dimensión de un arreglo");
			else { 
			    Basico ba = (Basico) t;
			    
			    if(ba.getNBasico() != 1)
				parser.custom_error("Tiene que usar int para definir la dimensión de un arreglo");
			}
		    }

		    Arreglo a = (Arreglo)l;
		    while(a.getSub() != null)
			a = (Arreglo)a.getSub();
		    
		    a.setSub(new Arreglo((ASTExpresion) e, null));
		    RESULT = l;		    
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadimension",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipos ::= IDENTIFIER 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   Tipo t = parser.alias_actual.exist(i);
	   if(t==null)
	       parser.type_declaration(i);
	   RESULT = t;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipos ::= arreglos 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos ::= complejos 
            {
              Tipo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipos ::= basicos 
            {
              Tipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaraciontypedef ::= TYPEDEF tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo ti = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (!parser.alias_actual.insert(new Sym(i, ti), parser.anidamiento))
			    parser.used_error(i);
		       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciontypedef",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaatributos ::= tipos IDENTIFIER SEQ 
            {
              LinkedList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		    LinkedList l = new LinkedList();
		    LinkedList campos = new LinkedList();
		    campos.add(i);
		    LinkedList tipos = new LinkedList();
		    tipos.add(t);
		    l.add(tipos);
		    l.add(campos);
		    RESULT = l;
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaatributos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaatributos ::= listaatributos tipos IDENTIFIER SEQ 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		    LinkedList ids = (LinkedList)l.getLast();
                    if(ids.contains(i))
			parser.custom_error("Identificador "+i+" repetido");		    
		    
		    ((LinkedList)l.getFirst()).add(t);
		    ((LinkedList)l.getLast()).add(i);
		    RESULT = l;
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaatributos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // union ::= UNION BRACKETLEFT listaatributos BRACKETRIGHT 
            {
              Tipo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	   Union u = new Union((LinkedList)l.getFirst(), (LinkedList)l.getLast());
	   RESULT = u;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("union",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct ::= STRUCT BRACKETLEFT listaatributos BRACKETRIGHT 
            {
              Tipo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    Registro r = new Registro((LinkedList)l.getFirst(), (LinkedList)l.getLast()); 
	    RESULT = r;                      
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // complejos ::= union 
            {
              Tipo RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo u = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complejos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // complejos ::= struct 
            {
              Tipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo s = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complejos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= tipos declaracionsimple 
            {
              ASTAsignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                 ASTIdentificador i;
		 SymVar s;
		 
		 Iterator it = l.getIds().iterator();
		 
		 ASTExpresion e = l.getExpr();
		 Tipo res = null;
		 
		 if(e != null) {
		     if(e.getCanCheck()) {
			 res = t.asign(e.getState());
			 if(res == null)
			     parser.type_error(t,e.getState(),"asignar");
			 else
			     l.setState(res);
		     }
		     else 
			 l.setCanCheck(false);
		 }                   
		 
		 while(it.hasNext()) {
		     i = (ASTIdentificador) it.next();
		     i.setState(t);
		     s = new SymVar(i.getValue(), t, false);
		     if(!parser.actual.insert(s, parser.anidamiento))
			 parser.used_error(i.getValue());
                     
		 }

		 RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= CONST tipos declaracionsimple 
            {
              ASTAsignacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion l = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 ASTIdentificador i;
		 SymVar s;
		 
		 Iterator it = l.getIds().iterator();
		 
		 ASTExpresion e = l.getExpr();
		 Tipo res = null;
		 
		 if(e == null)
		     parser.custom_error("Tiene que asignarle un valor a la variable(s) que son constantes");
		 else {
		     if(e.getCanCheck()) {
			 res = t.asign(e.getState());
			 if(res == null)
			     parser.type_error(t,e.getState(),"asignar");
			 else
			     l.setState(res);
		     }
		     else 
			 l.setCanCheck(false);
		 }
                   
		 while(it.hasNext()) {
		     i = (ASTIdentificador) it.next();
		     i.setState(t);
		     s = new SymVar(i.getValue(), t, true);
		     s.setAsigned(true);
		     if(!parser.actual.insert(s, parser.anidamiento))
			 parser.used_error(i.getValue());
                     
		 }
		 
		 RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= RETURN expresion SEQ 
            {
              ASTInstruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTExpresion e = (ASTExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 ASTInstruccion i = new ASTInstruccion("return");
		 i.setIreturn(true);
		 
		 Tipo t = parser.tipoactualfun;
		 
		 if(e.getCanCheck()) {
		     if(t.asign(e.getState()) == null)
			 parser.custom_error("Tiene que retornar un "+t);
		 }		 

		 RESULT = i;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= RETURN SEQ 
            {
              ASTInstruccion RESULT =null;
		
		 ASTInstruccion i = new ASTInstruccion("return");
		 i.setIreturn(true);
		 
		 Tipo t = parser.tipoactualfun;
		 
		 if(!(t instanceof Basico))
		     parser.custom_error("Tiene que retornar un "+t);
		 else {
		     Basico b = (Basico) t;
		     if(b.getNBasico() != 0)
			 parser.custom_error("Tiene que retornar un "+t);
		 }
                   
		 RESULT = i;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= llamadafuncion SEQ 
            {
              ASTInstruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTInvocar i = (ASTInvocar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= BREAK SEQ 
            {
              ASTInstruccion RESULT =null;
		
		 if(parser.canBreak==0)
		     parser.custom_error("Sólo los puede usar \"break\" en los ciclos");
		 
		 ASTInstruccion i = new ASTInstruccion("break");
		 i.setIbreak(true);
		 RESULT = i;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= loop 
            {
              ASTInstruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTWhile l = (ASTWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= condicional 
            {
              ASTInstruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTInstruccion c = (ASTInstruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= asignacion SEQ 
            {
              ASTInstruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTAsignacion a = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= declaraciontypedef SEQ 
            {
              ASTInstruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= declaracion SEQ 
            {
              ASTInstruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTAsignacion d = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listainstrucciones ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrucciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listainstrucciones ::= listainstrucciones instruccion 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTInstruccion i = (ASTInstruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        if(!parser.returning && !parser.breaking) {
			    if(i!=null) {
				l.add(i); 				
				i.update();
				
				if(i.getIreturn())
				    parser.returning = true;
				
				if(i.getIbreak())
				    parser.breaking = true;
				
			    }
			}
			else
			    parser.warning("Código inalcanzable");
			
			RESULT =l;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrucciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main ::= MAIN bloque 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTBloque b = (ASTBloque)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT=b;
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listadeclaraciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listadeclaraciones ::= listadeclaraciones declaracionprocedimiento 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			parser.procedimientos.add(p);
			parser.procDeclared = true;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listadeclaraciones ::= listadeclaraciones declaracionfuncion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			parser.procedimientos.add(f);
			parser.procDeclared = true;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listadeclaraciones ::= listadeclaraciones declaraciontypedef NT$2 SEQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;

			if(parser.procDeclared)
			    parser.crash_error("Se tienen que declarar las variables globales y typedef antes de los procedimientos y funciones");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listadeclaraciones ::= listadeclaraciones declaracion NT$1 SEQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTAsignacion d = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTAsignacion d = (ASTAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

			if(parser.procDeclared)
			    parser.crash_error("Se tienen que declarar las variables globales y typedef antes de los procedimientos y funciones");
			parser.globales.add(d);
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // voidfun ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Basico(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("voidfun",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // voidfun ::= tipos 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("voidfun",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= listadeclaraciones voidfun NT$0 main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              ASTPrograma p=new ASTPrograma((ASTBloque)b,((ASTBloque)b).getTable().getParent());
              RESULT=p;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.tipoactualfun = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

